# -*- coding: utf-8 -*-
"""Algo-MidTerm-Project-code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13oR66QjVJ2yOmBJGbcvY-AS14X2CnKnV
"""

import timeit
import random
import matplotlib.pyplot as plt
import numpy as np

MIN_MERGE = 32

def quick_sort(arr):
    if len(arr) <= 1:
        return arr

    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]

    return quick_sort(left) + middle + quick_sort(right)

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

def radix_sort(arr):
    max_num = max(arr)
    exp = 1
    while max_num // exp > 0:
        counting_sort(arr, exp)
        exp *= 10

def counting_sort(arr, exp):
    n = len(arr)
    output = [0] * n
    count = [0] * 10

    for i in range(n):
        index = arr[i] // exp
        count[index % 10] += 1

    for i in range(1, 10):
        count[i] += count[i - 1]

    i = n - 1
    while i >= 0:
        index = arr[i] // exp
        output[count[index % 10] - 1] = arr[i]
        count[index % 10] -= 1
        i -= 1
    for i in range(n):
        arr[i] = output[i]


def bucket_sort(arr):
    n = len(arr)
    if n <= 1:
        return arr

    min_val, max_val = min(arr), max(arr)
    range_size = max_val - min_val + 1

    initial_bucket_size = max(1, range_size // n)

    num_buckets = (range_size + initial_bucket_size - 1) // initial_bucket_size

    buckets = [[] for _ in range(num_buckets)]

    for num in arr:
        bucket_index = (num - min_val) // initial_bucket_size
        buckets[bucket_index].append(num)

    arr.clear()
    count = 0
    for bucket in buckets:
        count=count+1
        quick_sort(bucket)
        arr.extend(bucket)

    print(count)

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

def merge(arr, l, m, r):
    len1, len2 = m - l + 1, r - m
    left, right = [], []
    for i in range(0, len1):
        left.append(arr[l + i])
    for i in range(0, len2):
        right.append(arr[m + 1 + i])

    i, j, k = 0, 0, l

    while i < len1 and j < len2:
        if left[i] <= right[j]:
            arr[k] = left[i]
            i += 1

        else:
            arr[k] = right[j]
            j += 1

        k += 1

    while i < len1:
        arr[k] = left[i]
        k += 1
        i += 1

    while j < len2:
        arr[k] = right[j]
        k += 1
        j += 1


def calcMinRun(n):
    r = 0
    while n >= MIN_MERGE:
        r |= n & 1
        n >>= 1
    return n + r

def insertionSort(arr, left, right):
    for i in range(left + 1, right + 1):
        j = i
        while j > left and arr[j] < arr[j - 1]:
            arr[j], arr[j - 1] = arr[j - 1], arr[j]
            j -= 1


def timsort(arr):
    n = len(arr)
    minRun = calcMinRun(n)

    for start in range(0, n, minRun):
        end = min(start + minRun - 1, n - 1)
        insertionSort(arr, start, end)

    size = minRun
    while size < n:
        for left in range(0, n, 2 * size):
            mid = min(n - 1, left + size - 1)
            right = min((left + 2 * size - 1), (n - 1))

            if mid < right:
                merge(arr, left, mid, right)

        size = 2 * size

def heapify(arr, n, i):
    largest = i
    left_child = 2 * i + 1
    right_child = 2 * i + 2

    if left_child < n and arr[left_child] > arr[largest]:
        largest = left_child

    if right_child < n and arr[right_child] > arr[largest]:
        largest = right_child

    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)

    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)

def measure_time(sort_function, input_data):
    start_time = timeit.default_timer()
    sort_function(input_data.copy())
    return timeit.default_timer() - start_time

def generate_input_data(n, input_type):
    if input_type == 1:
        return random.sample(range(n), n)
    elif input_type == 2:
        return [random.randint(0, 950) for _ in range(n)]
    elif input_type == 3:
        return [random.randint(0, n**3) for _ in range(n)]
    elif input_type == 4:
        return [random.randint(0, int(np.log2(n))) for _ in range(n)]
    elif input_type == 5:
        return [random.randint(0, n) * 1000 for _ in range(n)]
    elif input_type == 6:
        arr = list(range(n))
        for _ in range(int(np.log2(n)/2)):
            i, j = random.sample(range(n), 2)
            arr[i], arr[j] = arr[j], arr[i]
        return arr


def plot_bar_graph(input_type):
    sizes = [100000, 500000, 1000000, 5000000, 10000000]
    algorithms = [quick_sort, merge_sort, radix_sort,bucket_sort, timsort, heap_sort]

    bar_width = 0.1
    opacity = 0.8
    index = np.arange(len(sizes))

    df_data = {'Algorithm': [], 'Size': [], 'Average Execution Time (s)': []}

    for i, algorithm in enumerate(algorithms):
        avg_times = []
        for size in sizes:
            run_times = []
            input_data = generate_input_data(size, input_type)
            execution_time = measure_time(algorithm, input_data)
            print(algorithm)
            print(execution_time)
            run_times.append(execution_time)

        plt.bar(index + i * bar_width, run_times, bar_width, label=algorithm.__name__)

    plt.xlabel('Input Size')
    plt.ylabel('Average Execution Time (s)')
    plt.title(f'Performance Comparison - Input Type {input_type}')
    plt.xticks(index + bar_width * (len(algorithms) / 2), sizes)
    plt.legend()
    plt.show()


# Test for different input types
for input_type in range(1, 7):
    plot_bar_graph(input_type)